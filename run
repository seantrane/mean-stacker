#!/usr/bin/env bash
# shellcheck disable=SC2034
# --------------------------------------------------------------------------------------------------
# ==================================================================================================
# ==================================================================================================
# **************************************************************************************************
#
#  88888888ba   88        88  888b      88
#  88      "8b  88        88  8888b     88
#  88      ,8P  88        88  88 `8b    88
#  88aaaaaa8P'  88        88  88  `8b   88
#  88""""88'    88        88  88   `8b  88
#  88    `8b    88        88  88    `8b 88
#  88     `8b   Y8a.    .a8P  88     `8888
#  88      `8b   `"Y8888Y"'   88      `888
#
# **************************************************************************************************
# --------------------------------------------------------------------------------------------------
# Application RUN scripts for CI/CD automation.
#
# This file is responsible for:
#   installing, building, testing, running, deploying and managing the app.
#
# See README file for more information.
# --------------------------------------------------------------------------------------------------

set -o errexit # exit if a command fails
set -o pipefail # return exit status of last command
[[ ! -z "${NOUNSET:-}" ]] && set -o nounset # exit if using undeclared variable
[[ ! -z "${TRACE:-}" ]] && set -o xtrace # trace of command execution
IFS=$'\n\t' # (Internal Field Separator) better word splitting

__DIR=$( cd "${BASH_SOURCE%/*}" && pwd ) # path to script directory
__FILE="${__DIR}/$(basename "${BASH_SOURCE[0]}")" # path to script file
__BASE="$(basename "$__FILE" .sh)" # filename of script
__DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ") # timestamp

# ==================================================================================================
# CHECK/LOAD/SET SCRIPT REQUIREMENTS
# ==================================================================================================

if ! type "npm" &> /dev/null; then
  echo "!!! npm is required to run this script !!!" && echo ""
  echo "!!! Please install npm before running this script !!!" && echo ""
  exit 1
fi

# Install 'STShell'
[[ ! -d "${__DIR}/node_modules/stshell" ]] && npm install stshell

# Load 'STShell' support
if [[ -z "${STSHELL_SUPPORT:-}" ]] && [[ -d "${__DIR}/node_modules/stshell" ]]; then
  # shellcheck disable=SC1090,SC1091
  . "${__DIR}/node_modules/stshell/scripts/support.sh"
else
  echo "!!! 'STShell' is required to run this script !!!" && echo ""
  echo "!!! Please install before running this script !!!" && echo ""
  exit 1
fi

# Start script timer
start=$(sh_start)

sh_heading "RUN script started (${__DATE})"

# --------------------------------------------------------------------------------------------------
# ==================================================================================================
# ==================================================================================================
# **************************************************************************************************
#
#  88888888888  888b      88  8b           d8
#  88           8888b     88  `8b         d8'
#  88           88 `8b    88   `8b       d8'
#  88aaaaa      88  `8b   88    `8b     d8'
#  88"""""      88   `8b  88     `8b   d8'
#  88           88    `8b 88      `8b d8'
#  88           88     `8888       `888'
#  88888888888  88      `888        `8'
#
# ==================================================================================================
# TOGGLES / SPECIAL VARIABLES
# ==================================================================================================

SCRIPTS_PATH="${__DIR}/scripts"
TEMP_PATH="${__DIR}/temp"
TEMP_BUILD_PATH="${TEMP_PATH}/build"

# Get environment variables from '.env' file, if available.
DOTENV_PATH="${__DIR}/.env"
[[ -e "$DOTENV_PATH" ]] && {
  sh_info "Loading '.env' variables"
  dotenv "$DOTENV_PATH"
}

# Get private variables/credentials from '.localrc' file, if available.
DOTLOCALRC_PATH="${__DIR}/.localrc"
[[ -e "$DOTLOCALRC_PATH" ]] && {
  sh_info "Loading '.localrc' variables"
  dotenv "$DOTLOCALRC_PATH"
}

# **************************************************************************************************
# ==================================================================================================
# ==================================================================================================
# --------------------------------------------------------------------------------------------------


# --------------------------------------------------------------------------------------------------
# ==================================================================================================
# ==================================================================================================
# **************************************************************************************************
#
#    ,ad8888ba,   88           88
#   d8"'    `"8b  88           88
#  d8'            88           88
#  88             88           88
#  88             88           88
#  Y8,            88           88
#   Y8a.    .a8P  88           88
#    `"Y8888Y"'   88888888888  88
#
# ==================================================================================================
# CLI HELP DOCUMENTATION
# ==================================================================================================
CLI_HELP_DOC="
  RUN CLI

  Usage:

    ./run [--option]

    bash ./run [--option]

    ./run -h | --help

    # ENV arguments can be provided as below on all commands.

    ./run --env=[DEV|UAT|PROD]

    # Install, Build, Test, E2E:

    ./run -ci

    # Reporting:

    ./run --report

    # Debug the run script

    ./run --debug --ci

    # After Git-Pull:

    ./run --clean --install

    # Before Git-Push/Pull-Request:

    ./run --clean --ci

    # After Pull-Request-Merge (increment develop branch):

    ./run --semver=patch

    # For CI/CD Pipeline:

    ./run --clean --ci --report --e2e -u

    # After Deploy-to-Production (increment develop branch):

    ./run --semver=minor

  Options:

    --debug             Turn on debug mode

    --env=*             Set the ENV [local, dev, uat, prod]

    --clean             Clean existing application build/test files

    --ci                Continuous Integration (CI)
                        ...Install, Build, Test, E2E

    -i, --install       Install the application

    -b, --build         Build/compile application

    --docs              Compile documentation

    -t, --test          Run lint/unit/integration/mock tests

    --report            Run scanner/reporting

    -s, --start         Start the application

    --e2e               Run End-to-End tests
                        - running e2e will automatically start (-s) the app

    --semver=*          Increment the application version using SEMVER
                        Value is appended to 'semver -i' command
                        See: https://github.com/npm/node-semver

    -p, --publish       Publish the application (with NPM, etc.)

    -u, --upload        Push/upload the application
                        (to AWS ECR/S3, respectively)

    -d, --deploy        Deploy the application
                        (with AWS Elastic Beanstalk)

    -h, --help          CLI HELP
"

# ==================================================================================================
sh_info "Loading arguments"
# ==================================================================================================
# Arguments are sorted in the order they are played in the script
RUN_DEBUG=false
RUN_CLEAN=false
RUN_INSTALL=false
RUN_LINT=false
RUN_BUILD=false
RUN_TEST=false
RUN_DOCS=false
RUN_REPORT=false
RUN_START=false
RUN_E2E=false
RUN_STOP=false
RUN_SEMVER=
RUN_PUBLISH=false
RUN_UPLOAD=false
RUN_DEPLOY=false

for ARG in "$@"; do
  case "$ARG" in
    --help)
      sh_heading "CLI HELP"
      sh_code "${CLI_HELP_DOC}"
      exit
      ;;
    -h)
      sh_heading "CLI HELP"
      sh_code "${CLI_HELP_DOC}"
      exit
      ;;
    --debug)
      RUN_DEBUG=true
      ;;
    --env=*)
      ENV=${ARG#--env=}
      ;;
    --clean)
      RUN_CLEAN=true
      ;;
    --ci)
      RUN_INSTALL=true
      RUN_LINT=true
      RUN_BUILD=true
      RUN_TEST=true
      RUN_START=true
      RUN_E2E=true
      RUN_STOP=true
      ;;
    --install)
      RUN_INSTALL=true
      ;;
    -i)
      RUN_INSTALL=true
      ;;
    --lint)
      RUN_LINT=true
      ;;
    -l)
      RUN_LINT=true
      ;;
    --build)
      RUN_BUILD=true
      ;;
    -b)
      RUN_BUILD=true
      ;;
    --test)
      RUN_TEST=true
      ;;
    -t)
      RUN_TEST=true
      ;;
    --docs)
      RUN_DOCS=true
      ;;
    --report)
      RUN_REPORT=true
      ;;
    --start)
      RUN_START=true
      ;;
    -s)
      RUN_START=true
      ;;
    --e2e)
      RUN_E2E=true
      ;;
    --stop)
      RUN_STOP=true
      ;;
    --semver=*)
      RUN_SEMVER=${ARG#--semver=}
      ;;
    --publish)
      RUN_PUBLISH=true
      ;;
    -p)
      RUN_PUBLISH=true
      ;;
    --upload)
      RUN_UPLOAD=true
      ;;
    -u)
      RUN_UPLOAD=true
      ;;
    --deploy)
      RUN_DEPLOY=true
      ;;
    -d)
      RUN_DEPLOY=true
      ;;
    --skip)
      RUN_INSTALL=false
      RUN_LINT=false
      RUN_BUILD=false
      RUN_TEST=false
      RUN_START=false
      RUN_E2E=false
      RUN_STOP=false
      ;;

    # ==============================================================================================
    # ADDITIONAL ARGUMENTS GO HERE
    # ==============================================================================================

    --egg)
      sh_note "The egg hatched."
      sh_code "${__DATE}"
      ;;

    # ----------------------------------------------------------------------------------------------
    # LEGEND:
    # ----------------------------------------------------------------------------------------------
    # Flag-based:
    # --flag)
    #   FLAG=true
    #   ;;
    # -f)
    #   FLAG_SHORTHAND=true
    #   ;;
    # ----------------------------------------------------------------------------------------------
    # String-based:
    # --str=*)
    #   STR=${ARG#--str=}
    #   ;;
    # ----------------------------------------------------------------------------------------------
    # CSV-based:
    # --csv=*)
    #   CSV_STR=${ARG#--csv=}
    #   CSV=( ${CSV_STR//,/ } )
    #   ;;
    # ----------------------------------------------------------------------------------------------

    # ==============================================================================================
    # Catch-all failure for unknown arguments
    # ==============================================================================================
    *)
      sh_fail "Unknown option $ARG."
      ;;
  esac
done
# **************************************************************************************************
# ==================================================================================================
# ==================================================================================================
# --------------------------------------------------------------------------------------------------


# --------------------------------------------------------------------------------------------------
# ==================================================================================================
# ==================================================================================================
# **************************************************************************************************
#
#  8b           d8   db         88888888ba    ad88888ba
#  `8b         d8'  d88b        88      "8b  d8"     "8b
#   `8b       d8'  d8'`8b       88      ,8P  Y8,
#    `8b     d8'  d8'  `8b      88aaaaaa8P'  `Y8aaaaa,
#     `8b   d8'  d8YaaaaY8b     88""""88'      `"""""8b,
#      `8b d8'  d8""""""""8b    88    `8b            `8b
#       `888'  d8'        `8b   88     `8b   Y8a     a8P
#        `8'  d8'          `8b  88      `8b   "Y88888P"
#
# ==================================================================================================
sh_info "Loading/setting application variables"
# ==================================================================================================

ENV=$(get_env_var "ENV" "${ENV:-}")
[[ -z "${ENV}" ]] && ENV="local"
require_var "ENV"
ENV_LC="$(lowercase ${ENV})"

PORT=$(get_env_var "PORT" "3000")
APP_NAMESPACE=$(get_env_var "APP_NAMESPACE" "")
APP_NAME=$(get_env_var "APP_NAME" "$(node -p "require('./package.json').name")")
require_var "APP_NAME"
APP_NAME_ALT=$(get_env_var "APP_NAME_ALT" "")
APP_NAME_ENV_DEFAULT="${APP_NAME}-${ENV}"
[[ ! -z "${APP_NAME_ALT}" ]] && APP_NAME_ENV_DEFAULT="${APP_NAME}-${APP_NAME_ALT}-${ENV}"
APP_NAME_ENV=$(get_env_var "APP_NAME_ENV" "${APP_NAME_ENV_DEFAULT}")

# ==================================================================================================
sh_info "Setting SEMVER tag variables"
# ==================================================================================================

APP_TAG="latest"
APP_VERSION=$(node -p "require('./package.json').version")
APP_BRANCH=$(git_branch_name)
# APP_SEMVER_COMMIT="" # .$(git log --oneline -1 | awk '{print $1}')
APP_BUILD_NUMBER=$(get_env_var "buildNumber" "${__DATE//[^0-9]/}")
# APP_SEMVER_BUILD="${APP_BUILD_NUMBER//[^0-9]/}"
# APP_SEMVER_PRE="$(lowercase ${APP_NAME_ALT}${ENV_LC})"
# APP_SEMVER_RELEASE="-${APP_SEMVER_PRE}.${APP_SEMVER_BUILD}"

# ==================================================================================================
sh_info "Setting ENV-specific application variables"
# ==================================================================================================

# --------------------------------------------------------------------------------------------------
if [[ "${ENV_LC}" == "local" ]]; then
# --------------------------------------------------------------------------------------------------
  # APP_SEMVER_RELEASE="-alpha.${APP_SEMVER_BUILD}"
  # APP_SEMVER_COMMIT=".$(git log --oneline -1 | awk '{print $1}')"
  API_URL="https://api-dev.domain.com"
  APP_URL="http://localhost:3000"

# --------------------------------------------------------------------------------------------------
elif [[ "${ENV_LC}" == "dev" ]]; then
# --------------------------------------------------------------------------------------------------
  # APP_NAME_ENV="${APP_NAME}-${ENV}"
  # APP_SEMVER_RELEASE="-beta.${APP_SEMVER_BUILD}"
  API_URL="https://api-dev.domain.com"
  APP_URL="https://dev.domain.com"

# --------------------------------------------------------------------------------------------------
elif [[ "${ENV_LC}" == "uat" ]]; then
# --------------------------------------------------------------------------------------------------
  # APP_NAME_ENV="${APP_NAME}-${ENV}"
  # APP_SEMVER_RELEASE="-rc.${APP_SEMVER_BUILD}"
  API_URL="https://api-uat.domain.com"
  APP_URL="https://uat.domain.com"

# --------------------------------------------------------------------------------------------------
elif [[ "${ENV_LC}" == "prod" ]]; then
# --------------------------------------------------------------------------------------------------
  # APP_NAME_ENV="${APP_NAME}-${ENV}"
  API_URL="https://api.domain.com"
  APP_URL="https://www.domain.com"

fi


# ==================================================================================================
sh_info "Setting Version/Build/Docker tag variables"
# ==================================================================================================

APP_TAG="v$(lowercase "$APP_VERSION")"

APP_NAMESPACE_TAG="$(lowercase "$APP_NAME")"
[[ ! -z $APP_NAMESPACE ]] && APP_NAMESPACE_TAG="$(lowercase "$APP_NAMESPACE")/$APP_NAMESPACE_TAG"

# ==================================================================================================
sh_info "Loading/setting AWS variables"
# ==================================================================================================

# AWS account/region
AWS_ACCOUNT_ID=$(get_env_var "AWS_ACCOUNT_ID")
AWS_DEFAULT_REGION=$(get_env_var "AWS_DEFAULT_REGION" "us-east-1")
AWS_REGION=$(get_env_var "AWS_REGION" "")
[[ -z "${AWS_REGION}" ]] && AWS_REGION="${AWS_DEFAULT_REGION}"

# AWS credentials
AWS_ACCESS_KEY_ID=$(get_env_var "AWS_ACCESS_KEY_ID" "")
AWS_SECRET_ACCESS_KEY=$(get_env_var "AWS_SECRET_ACCESS_KEY" "")

# Only require AWS credentials if uploading/deploying
if ( $RUN_UPLOAD ) || ( $RUN_DEPLOY ); then
  export AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY
  ( $RUN_DEBUG ) || {
    require_var "AWS_ACCESS_KEY_ID"
    require_var "AWS_SECRET_ACCESS_KEY"
  }
fi

# AWS application vars
AWS_EB_APP_ENV="${ENV}"
AWS_EB_APP_ENV_NAME="${APP_NAME_ENV}"
AWS_ECR_IMAGE_URL="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${APP_NAMESPACE_TAG}:${APP_TAG}"
AWS_ECS_MEMORY=$(get_env_var "AWS_ECS_MEMORY")
AWS_ECS_PORT_CONTAINER=$(get_env_var "AWS_ECS_PORT_CONTAINER" "${PORT}")
AWS_ECS_PORT_HOST=$(get_env_var "AWS_ECS_PORT_HOST")
AWS_S3_BUCKET=$(get_env_var "AWS_S3_BUCKET")
AWS_S3_URI=$(get_env_var "AWS_S3_URI" "$(lowercase "${APP_NAMESPACE_TAG}"-"${APP_TAG}".zip)")

# ==================================================================================================
sh_info "Saving ENV variables to '.env' file"
# ==================================================================================================

# group all of the variables in an array.
declare -a ENV_VARS=(
  "__DATE"
  "ENV"
  "ENV_LC"
  "HOST"
  "PORT"
  "API_URL"
  "APP_URL"
  "APP_BRANCH"
  "APP_BUILD_NUMBER"
  "APP_NAMESPACE"
  "APP_NAMESPACE_TAG"
  "APP_NAME"
  "APP_NAME_ENV"
  "APP_SEMVER"
  "APP_SEMVER_BUILD"
  "APP_SEMVER_COMMIT"
  "APP_SEMVER_RELEASE"
  "APP_TAG"
  "APP_VERSION"
  # "AWS_ACCESS_KEY_ID"
  # "AWS_SECRET_ACCESS_KEY"
  "AWS_ACCOUNT_ID"
  "AWS_DEFAULT_REGION"
  "AWS_EB_APP_ENV"
  "AWS_EB_APP_ENV_NAME"
  "AWS_ECR_IMAGE_URL"
  "AWS_ECS_MEMORY"
  "AWS_ECS_PORT_CONTAINER"
  "AWS_ECS_PORT_HOST"
  "AWS_S3_BUCKET"
  "AWS_S3_URI"
)
DOTENV_PATH="${__DIR}/.env"
DOTENV_EXAMPLE_PATH="${__DIR}/.env.example"
if [[ -e "$DOTENV_EXAMPLE_PATH" ]]; then
  # save variables to `.env` file using `.env.example` as a template.
  file_find_keys_replace ENV_VARS[@] "$DOTENV_EXAMPLE_PATH" "$DOTENV_PATH"
else
  # save variables to `.env` file using array.
  VARS_OUTPUT=$(output_vars "${ENV_VARS[@]}")
  echo "$VARS_OUTPUT" > "$DOTENV_PATH"
fi
# output `.env` file.
sh_code "$(cat "$DOTENV_PATH")"

sh_info "Exporting all '.env' variables to shell"
dotenv "$DOTENV_PATH"

# **************************************************************************************************
# ==================================================================================================
# ==================================================================================================
# --------------------------------------------------------------------------------------------------


# --------------------------------------------------------------------------------------------------
# ==================================================================================================
# ==================================================================================================
# **************************************************************************************************
#
#    ,ad8888ba,   88           88888888888         db         888b      88
#   d8"'    `"8b  88           88                 d88b        8888b     88
#  d8'            88           88                d8'`8b       88 `8b    88
#  88             88           88aaaaa          d8'  `8b      88  `8b   88
#  88             88           88"""""         d8YaaaaY8b     88   `8b  88
#  Y8,            88           88             d8""""""""8b    88    `8b 88
#   Y8a.    .a8P  88           88            d8'        `8b   88     `8888
#    `"Y8888Y"'   88888888888  88888888888  d8'          `8b  88      `888
#
# --------------------------------------------------------------------------------------------------
if ( $RUN_CLEAN ) && ( $RUN_DEBUG ); then sh_alert "DEBUG MODE: CLEAN scripting bypassed"
elif ( $RUN_CLEAN ); then sh_heading "CLEAN script started"
# --------------------------------------------------------------------------------------------------
# SCRIPTING GOES HERE:
# --------------------------------------------------------------------------------------------------

  sh_info "Removing all auto-generated directories"
  rm -rf \
    coverage \
    dist \
    doc \
    node_modules \
    "$TEMP_BUILD_PATH" \
    2> /dev/null

  sh_info "Cleaning cache(s)"
  npm cache clean -g -f < /dev/null 2> /dev/null
  npm cache clean -f < /dev/null 2> /dev/null

# --------------------------------------------------------------------------------------------------
sh_success "CLEAN script completed successfully"; fi
# **************************************************************************************************
# ==================================================================================================
# ==================================================================================================
# --------------------------------------------------------------------------------------------------


# --------------------------------------------------------------------------------------------------
# ==================================================================================================
# ==================================================================================================
# **************************************************************************************************
#
#  88  888b      88   ad88888ba  888888888888    db         88           88
#  88  8888b     88  d8"     "8b      88        d88b        88           88
#  88  88 `8b    88  Y8,              88       d8'`8b       88           88
#  88  88  `8b   88  `Y8aaaaa,        88      d8'  `8b      88           88
#  88  88   `8b  88    `"""""8b,      88     d8YaaaaY8b     88           88
#  88  88    `8b 88          `8b      88    d8""""""""8b    88           88
#  88  88     `8888  Y8a     a8P      88   d8'        `8b   88           88
#  88  88      `888   "Y88888P"       88  d8'          `8b  88888888888  88888888888
#
# ==================================================================================================
if ( $RUN_INSTALL ) && ( $RUN_DEBUG ); then
  sh_alert "DEBUG MODE: Install using '--dry-run' argument"
  run_or_fail npm install --dry-run
elif ( $RUN_INSTALL ); then sh_heading "INSTALL script started"
# --------------------------------------------------------------------------------------------------
# SCRIPTING GOES HERE:
# --------------------------------------------------------------------------------------------------

  run_or_fail npm install

# --------------------------------------------------------------------------------------------------
sh_success "INSTALL script completed successfully"; fi
# **************************************************************************************************
# ==================================================================================================
# ==================================================================================================
# --------------------------------------------------------------------------------------------------


# --------------------------------------------------------------------------------------------------
# ==================================================================================================
# ==================================================================================================
# **************************************************************************************************
#
#  88           88  888b      88  888888888888
#  88           88  8888b     88       88
#  88           88  88 `8b    88       88
#  88           88  88  `8b   88       88
#  88           88  88   `8b  88       88
#  88           88  88    `8b 88       88
#  88           88  88     `8888       88
#  88888888888  88  88      `888       88
#
# ==================================================================================================
if ( $RUN_LINT ) && ( $RUN_DEBUG ); then sh_alert "DEBUG MODE: Application linter bypassed"
elif ( $RUN_LINT ); then sh_heading "LINT script started"
# --------------------------------------------------------------------------------------------------
# SCRIPTING GOES HERE:
# --------------------------------------------------------------------------------------------------

  sh_info "Running linters on code and docs"

  run_or_fail npm run lint

  sh_info "Running linter on shell scripts"

  docker pull koalaman/shellcheck:stable
  docker run -v "$PWD:/mnt" koalaman/shellcheck \
    ./run \
    ./*.sh \
    || sh_fail "ShellCheck failed!"

  docker_clean koalaman/shellcheck koalaman/shellcheck:stable

# --------------------------------------------------------------------------------------------------
sh_success "LINT script completed successfully"; fi
# **************************************************************************************************
# ==================================================================================================
# ==================================================================================================
# --------------------------------------------------------------------------------------------------


# --------------------------------------------------------------------------------------------------
# ==================================================================================================
# ==================================================================================================
# **************************************************************************************************
#
#  88888888ba   88        88  88  88           88888888ba,
#  88      "8b  88        88  88  88           88      `"8b
#  88      ,8P  88        88  88  88           88        `8b
#  88aaaaaa8P'  88        88  88  88           88         88
#  88""""""8b,  88        88  88  88           88         88
#  88      `8b  88        88  88  88           88         8P
#  88      a8P  Y8a.    .a8P  88  88           88      .a8P
#  88888888P"    `"Y8888Y"'   88  88888888888  88888888Y"'
#
# ==================================================================================================
if ( $RUN_BUILD ) && ( $RUN_DEBUG ); then sh_alert "DEBUG MODE: BUILD scripting bypassed"
elif ( $RUN_BUILD ); then sh_heading "BUILD script started"
# --------------------------------------------------------------------------------------------------
# SCRIPTING GOES HERE:
# --------------------------------------------------------------------------------------------------

  rm -rf "$TEMP_BUILD_PATH" 2> /dev/null

  sh_info "Building application"
  if [[ "local" = "$ENV_LC" ]]; then
    run_or_fail npm run build
  else
    run_or_fail npm run build:ssr
  fi

# --------------------------------------------------------------------------------------------------
sh_success "BUILD script completed successfully"; fi
# **************************************************************************************************
# ==================================================================================================
# ==================================================================================================
# --------------------------------------------------------------------------------------------------


# --------------------------------------------------------------------------------------------------
# ==================================================================================================
# ==================================================================================================
# **************************************************************************************************
#
#  888888888888  88888888888  ad88888ba  888888888888
#       88       88          d8"     "8b      88
#       88       88          Y8,              88
#       88       88aaaaa     `Y8aaaaa,        88
#       88       88"""""       `"""""8b,      88
#       88       88                  `8b      88
#       88       88          Y8a     a8P      88
#       88       88888888888  "Y88888P"       88
#
# ==================================================================================================
if ( $RUN_TEST ) && ( $RUN_DEBUG ); then sh_alert "DEBUG MODE: Unit/Integration/Mock Tests bypassed"
elif ( $RUN_TEST ); then sh_heading "TEST script started"
# --------------------------------------------------------------------------------------------------
# SCRIPTING GOES HERE:
# --------------------------------------------------------------------------------------------------

  sh_info "Running Unit/Integration/Mock Tests"

  npm run test

# --------------------------------------------------------------------------------------------------
sh_success "TEST script completed successfully"; fi
# **************************************************************************************************
# ==================================================================================================
# ==================================================================================================
# --------------------------------------------------------------------------------------------------


# --------------------------------------------------------------------------------------------------
# ==================================================================================================
# ==================================================================================================
# **************************************************************************************************
#
#  88888888ba,      ,ad8888ba,      ,ad8888ba,    ad88888ba
#  88      `"8b    d8"'    `"8b    d8"'    `"8b  d8"     "8b
#  88        `8b  d8'        `8b  d8'            Y8,
#  88         88  88          88  88             `Y8aaaaa,
#  88         88  88          88  88               `"""""8b,
#  88         8P  Y8,        ,8P  Y8,                    `8b
#  88      .a8P    Y8a.    .a8P    Y8a.    .a8P  Y8a     a8P
#  88888888Y"'      `"Y8888Y"'      `"Y8888Y"'    "Y88888P"
#
# ==================================================================================================
if ( $RUN_DOCS ) && ( $RUN_DEBUG ); then sh_alert "DEBUG MODE: DOCS scripting bypassed"
elif ( $RUN_DOCS ); then sh_heading "DOCS script started"
# --------------------------------------------------------------------------------------------------
# SCRIPTING GOES HERE:
# --------------------------------------------------------------------------------------------------

  npm run docs

# --------------------------------------------------------------------------------------------------
sh_success "DOCS script completed successfully"; fi
# **************************************************************************************************
# ==================================================================================================
# ==================================================================================================
# --------------------------------------------------------------------------------------------------


# --------------------------------------------------------------------------------------------------
# ==================================================================================================
# ==================================================================================================
# **************************************************************************************************
#
#  88888888ba   88888888888  88888888ba     ,ad8888ba,    88888888ba  888888888888
#  88      "8b  88           88      "8b   d8"'    `"8b   88      "8b      88
#  88      ,8P  88           88      ,8P  d8'        `8b  88      ,8P      88
#  88aaaaaa8P'  88aaaaa      88aaaaaa8P'  88          88  88aaaaaa8P'      88
#  88""""88'    88"""""      88""""""'    88          88  88""""88'        88
#  88    `8b    88           88           Y8,        ,8P  88    `8b        88
#  88     `8b   88           88            Y8a.    .a8P   88     `8b       88
#  88      `8b  88888888888  88             `"Y8888Y"'    88      `8b      88
#
# ==================================================================================================
if ( $RUN_REPORT ) && ( $RUN_DEBUG ); then sh_alert "DEBUG MODE: REPORT scripting bypassed"
elif ( $RUN_REPORT ); then sh_heading "REPORT script started"
# --------------------------------------------------------------------------------------------------
# SCRIPTING GOES HERE:
# --------------------------------------------------------------------------------------------------

  if [[ -z "${CODECOV_TOKEN:-}" ]]; then
    sh_alert "'CODECOV_TOKEN' variable was not found or was empty."
    sh_text "codecov.io reporting cannot be performed without 'CODECOV_TOKEN' variable set."
  else
    sh_heading "codecov.io script started"
    [[ ! -d "${__DIR}/coverage" ]] && sh_fail "'./coverage' not found."
    bash <(curl -s https://codecov.io/bash)
  fi

  if [[ -e "${__DIR}/sonar-project.properties" ]]; then
    if [[ -z "${SONAR_SCANNER_PATH:-}" ]]; then
      sh_alert "'SONAR_SCANNER_PATH' variable was not found or was empty."
      sh_text "SONAR reporting cannot be performed without 'SONAR_SCANNER_PATH' variable set."
    elif [[ -z "${SONAR_SERVER_URL:-}" ]]; then
      sh_alert "'SONAR_SERVER_URL' variable was not found or was empty."
      sh_text "SONAR reporting cannot be performed without 'SONAR_SERVER_URL' variable set."
    else
      sh_heading "SONAR script started"
      require_bin "${SONAR_SCANNER_PATH}"
      [[ ! -d "${__DIR}/coverage" ]] && sh_fail "'./coverage' not found."
      run_or_fail "$SONAR_SCANNER_PATH" -Dsonar.host.url="$SONAR_SERVER_URL"
    fi
  fi

# --------------------------------------------------------------------------------------------------
sh_success "REPORT script completed successfully"; fi
# **************************************************************************************************
# ==================================================================================================
# ==================================================================================================
# --------------------------------------------------------------------------------------------------


# --------------------------------------------------------------------------------------------------
# ==================================================================================================
# ==================================================================================================
# **************************************************************************************************
#
#   ad88888ba  888888888888    db         88888888ba  888888888888
#  d8"     "8b      88        d88b        88      "8b      88
#  Y8,              88       d8'`8b       88      ,8P      88
#  `Y8aaaaa,        88      d8'  `8b      88aaaaaa8P'      88
#    `"""""8b,      88     d8YaaaaY8b     88""""88'        88
#          `8b      88    d8""""""""8b    88    `8b        88
#  Y8a     a8P      88   d8'        `8b   88     `8b       88
#   "Y88888P"       88  d8'          `8b  88      `8b      88
#
# ==================================================================================================
if ( $RUN_START ) &&( $RUN_DEBUG ); then sh_alert "DEBUG MODE: START scripting bypassed"
elif ( $RUN_START ); then sh_heading "START script started"
# --------------------------------------------------------------------------------------------------
# SCRIPTING GOES HERE:
# --------------------------------------------------------------------------------------------------

  if [[ "local" = "$ENV_LC" ]]; then
    run_or_fail npm run docker:start
  else
    run_or_fail npm run serve:ssr
  fi

# --------------------------------------------------------------------------------------------------
sh_success "START script completed successfully"; fi
# **************************************************************************************************
# ==================================================================================================
# ==================================================================================================
# --------------------------------------------------------------------------------------------------


# --------------------------------------------------------------------------------------------------
# ==================================================================================================
# ==================================================================================================
# **************************************************************************************************
#
#  88888888888   ad888888b,  88888888888     888888888888  88888888888  ad88888ba  888888888888
#  88           d8"     "88  88                   88       88          d8"     "8b      88
#  88                   a8P  88                   88       88          Y8,              88
#  88aaaaa           ,d8P"   88aaaaa              88       88aaaaa     `Y8aaaaa,        88
#  88"""""         a8P"      88"""""              88       88"""""       `"""""8b,      88
#  88            a8P'        88                   88       88                  `8b      88
#  88           d8"          88                   88       88          Y8a     a8P      88
#  88888888888  88888888888  88888888888          88       88888888888  "Y88888P"       88
#
# ==================================================================================================
if ( $RUN_E2E ) && ( $RUN_DEBUG ); then sh_alert "DEBUG MODE: E2E tests bypassed"
elif ( $RUN_E2E ); then sh_heading "E2E script started"
# --------------------------------------------------------------------------------------------------
# SCRIPTING GOES HERE:
# --------------------------------------------------------------------------------------------------

  run_or_fail npm run e2e

# --------------------------------------------------------------------------------------------------
sh_success "E2E script completed successfully"; fi
# **************************************************************************************************
# ==================================================================================================
# ==================================================================================================
# --------------------------------------------------------------------------------------------------


# --------------------------------------------------------------------------------------------------
# ==================================================================================================
# ==================================================================================================
# **************************************************************************************************
#
#   ad88888ba  888888888888  ,ad8888ba,    88888888ba
#  d8"     "8b      88      d8"'    `"8b   88      "8b
#  Y8,              88     d8'        `8b  88      ,8P
#  `Y8aaaaa,        88     88          88  88aaaaaa8P'
#    `"""""8b,      88     88          88  88""""""'
#          `8b      88     Y8,        ,8P  88
#  Y8a     a8P      88      Y8a.    .a8P   88
#   "Y88888P"       88       `"Y8888Y"'    88
#
# ==================================================================================================
if ( $RUN_STOP ) && ( $RUN_DEBUG ); then sh_alert "DEBUG MODE: STOP scripting bypassed"
elif ( $RUN_STOP ); then sh_heading "STOP script started"
# --------------------------------------------------------------------------------------------------
# SCRIPTING GOES HERE:
# --------------------------------------------------------------------------------------------------

  # npm run docker:rmi

# --------------------------------------------------------------------------------------------------
sh_success "STOP script completed successfully"; fi
# **************************************************************************************************
# ==================================================================================================
# ==================================================================================================
# --------------------------------------------------------------------------------------------------


# --------------------------------------------------------------------------------------------------
# ==================================================================================================
# ==================================================================================================
# **************************************************************************************************
#
#   ad88888ba   88888888888  88b           d88  8b           d8  88888888888  88888888ba
#  d8"     "8b  88           888b         d888  `8b         d8'  88           88      "8b
#  Y8,          88           88`8b       d8'88   `8b       d8'   88           88      ,8P
#  `Y8aaaaa,    88aaaaa      88 `8b     d8' 88    `8b     d8'    88aaaaa      88aaaaaa8P'
#    `"""""8b,  88"""""      88  `8b   d8'  88     `8b   d8'     88"""""      88""""88'
#          `8b  88           88   `8b d8'   88      `8b d8'      88           88    `8b
#  Y8a     a8P  88           88    `888'    88       `888'       88           88     `8b
#   "Y88888P"   88888888888  88     `8'     88        `8'        88888888888  88      `8b
#
# ==================================================================================================
if [[ ! -z "${RUN_SEMVER}" ]] && ( $RUN_DEBUG ); then sh_alert "DEBUG MODE: SEMVER script bypassed"
  [[ $(git diff --shortstat 2> /dev/null | tail -n1) != "" ]] && {
    sh_error "Git working directory not clean. Please stash or commit your changes."
  }
elif [[ ! -z "${RUN_SEMVER}" ]]; then sh_heading "SEMVER script started"
# --------------------------------------------------------------------------------------------------
# SCRIPTING GOES HERE:
# --------------------------------------------------------------------------------------------------

  ( $RUN_PUBLISH ) || run_or_fail npm run semantic-release

# --------------------------------------------------------------------------------------------------
sh_success "SEMVER script completed successfully"; fi
# **************************************************************************************************
# ==================================================================================================
# ==================================================================================================
# --------------------------------------------------------------------------------------------------


# --------------------------------------------------------------------------------------------------
# ==================================================================================================
# ==================================================================================================
# **************************************************************************************************
#
#  88888888ba   88        88  88888888ba   88           88   ad88888ba   88        88
#  88      "8b  88        88  88      "8b  88           88  d8"     "8b  88        88
#  88      ,8P  88        88  88      ,8P  88           88  Y8,          88        88
#  88aaaaaa8P'  88        88  88aaaaaa8P'  88           88  `Y8aaaaa,    88aaaaaaaa88
#  88""""""'    88        88  88""""""8b,  88           88    `"""""8b,  88""""""""88
#  88           88        88  88      `8b  88           88          `8b  88        88
#  88           Y8a.    .a8P  88      a8P  88           88  Y8a     a8P  88        88
#  88            `"Y8888Y"'   88888888P"   88888888888  88   "Y88888P"   88        88
#
# ==================================================================================================
if ( $RUN_PUBLISH ) && ( $RUN_DEBUG ); then sh_alert "DEBUG MODE: PUBLISH scripting bypassed"
elif ( $RUN_PUBLISH ); then sh_heading "PUBLISH script started"
# --------------------------------------------------------------------------------------------------
# SCRIPTING GOES HERE:
# --------------------------------------------------------------------------------------------------

  [[ -z "${RUN_SEMVER}" ]] && run_or_fail npm run semantic-release

# --------------------------------------------------------------------------------------------------
sh_success "PUBLISH script completed successfully"; fi
# **************************************************************************************************
# ==================================================================================================
# ==================================================================================================
# --------------------------------------------------------------------------------------------------


# --------------------------------------------------------------------------------------------------
# ==================================================================================================
# ==================================================================================================
# **************************************************************************************************
#
#  88        88  88888888ba   88           ,ad8888ba,         db         88888888ba,
#  88        88  88      "8b  88          d8"'    `"8b       d88b        88      `"8b
#  88        88  88      ,8P  88         d8'        `8b     d8'`8b       88        `8b
#  88        88  88aaaaaa8P'  88         88          88    d8'  `8b      88         88
#  88        88  88""""""'    88         88          88   d8YaaaaY8b     88         88
#  88        88  88           88         Y8,        ,8P  d8""""""""8b    88         8P
#  Y8a.    .a8P  88           88          Y8a.    .a8P  d8'        `8b   88      .a8P
#   `"Y8888Y"'   88           88888888888  `"Y8888Y"'  d8'          `8b  88888888Y"'
#
# ==================================================================================================
if ( $RUN_UPLOAD ); then sh_heading "UPLOAD script started"
# --------------------------------------------------------------------------------------------------
# SCRIPTING GOES HERE:
# --------------------------------------------------------------------------------------------------

  require_bin "aws"
  require_bin "docker"
  require_func "aws_docker_push"
  require_func "aws_eb_create"
  require_func "aws_s3_upload"
  require_func "file_find_keys_replace"
  require_func "make_application_manifest"
  require_func "make_aws_eb_dockerrun"
  require_func "make_aws_ebextensions_log_volume"
  require_func "make_aws_ebextensions_newrelic"

  # ------------------------------------------------------------------------------------------------
  # STEP 1: Prepare and compress build for deployment
  # ------------------------------------------------------------------------------------------------

  require_var "AWS_ECR_IMAGE_URL"

  sh_info "Creating (or replacing) '${TEMP_BUILD_PATH}' directory"
  rm -rf "$TEMP_BUILD_PATH" 2> /dev/null
  mkdir -p "$TEMP_BUILD_PATH"
  sh_info "Copying build artifacts"
  cp -af \
    .env \
    dist \
    Dockerfile \
    ecosystem.config.js \
    newrelic.js \
    package-lock.json \
    package.json \
    start.sh \
    "$TEMP_BUILD_PATH"
  make_application_manifest "$TEMP_BUILD_PATH" "$APP_NAME" "$APP_TAG" "$__DATE"
  sh_info "Build artifacts copied successfully"
  sh_code "$(ls -al "$TEMP_BUILD_PATH")"
  (
    cd "$TEMP_BUILD_PATH"
    sh_info "Ensuring only production-dependencies are installed before compressing app"
    run_or_fail npm install --only=prod
    npm cache clean -f < /dev/null 2> /dev/null

    sh_info "Building Docker image: '${AWS_ECR_IMAGE_URL}'..."
    run_or_fail docker build -t "$AWS_ECR_IMAGE_URL" .
  )

  # ------------------------------------------------------------------------------------------------
  # STEP 2: Push image to Docker repository
  # ------------------------------------------------------------------------------------------------

  if ( $RUN_DEBUG ); then
    sh_alert "DEBUG MODE: AWS ECR (docker push) scripting bypassed"
  else
    IFS=$' \n\t' # Disable better-word-splitting for the next command
    aws_docker_push "$AWS_ECR_IMAGE_URL" "$AWS_DEFAULT_REGION"
    IFS=$'\n\t' # Re-enable better-word-splitting
  fi

  # ------------------------------------------------------------------------------------------------
  # STEP 3: Upload Beanstalk configuration to S3
  # ------------------------------------------------------------------------------------------------

  sh_info "Compile the AWS ElasticBeanstalk config files"

  TEMP_AWS_EB_APP_PATH="${TEMP_PATH}/aws_eb_app"
  TEMP_AWS_EB_EXT_PATH="${TEMP_AWS_EB_APP_PATH}/.ebextensions"

  sh_info "Creating (or replacing) '$TEMP_AWS_EB_APP_PATH'"
  rm -rf "$TEMP_AWS_EB_APP_PATH" 2> /dev/null
  mkdir -p "$TEMP_AWS_EB_APP_PATH" && mkdir -p "$TEMP_AWS_EB_EXT_PATH"

  declare -a AWS_EB_VARS=(
    "AWS_EB_APP_ENV"
    "AWS_EB_APP_ENV_NAME"
    "AWS_ECR_IMAGE_URL"
    "AWS_ECS_MEMORY"
    "AWS_ECS_PORT_CONTAINER"
    "AWS_ECS_PORT_HOST"
  )
  make_aws_eb_dockerrun "$TEMP_AWS_EB_APP_PATH" AWS_EB_VARS[@]
  make_aws_ebextensions_log_volume "$TEMP_AWS_EB_EXT_PATH" "$AWS_EB_APP_ENV_NAME"
  make_aws_ebextensions_newrelic "$TEMP_AWS_EB_EXT_PATH" "$AWS_EB_APP_ENV_NAME" "59a4e37f66a0668d20df5be312e88b20fa13558e"

  sh_info "Making zip file for S3-upload"
  (
    cd "$TEMP_AWS_EB_APP_PATH"
    run_or_fail zip -rv "${__DIR}/${AWS_S3_URI}" ./* .ebextensions
  )

  if ( $RUN_DEBUG ); then
    sh_alert "DEBUG MODE: AWS S3 upload scripting bypassed"
  else
    run_or_fail aws_s3_upload "$AWS_S3_URI" "$AWS_S3_BUCKET" "$AWS_S3_URI"

    sh_info "Remove the zip file, if it exists"
    [[ -e "$AWS_S3_URI" ]] && rm -rf "$AWS_S3_URI"

    sh_info "Remove the AWS ElasticBeanstalk files"
    rm -rf "$TEMP_AWS_EB_APP_PATH" 2> /dev/null
  fi

  # ------------------------------------------------------------------------------------------------
  # STEP 4: Create Beanstalk application version
  # ------------------------------------------------------------------------------------------------

  if ( $RUN_DEBUG ); then
    sh_alert "DEBUG MODE: AWS Elastic Beanstalk create-application-version bypassed"
  else
    aws_eb_create "$APP_NAME" "$APP_TAG" "$AWS_S3_BUCKET" "$AWS_S3_URI"
  fi

# --------------------------------------------------------------------------------------------------
sh_success "UPLOAD script completed successfully"; fi
# **************************************************************************************************
# ==================================================================================================
# ==================================================================================================
# --------------------------------------------------------------------------------------------------


# --------------------------------------------------------------------------------------------------
# ==================================================================================================
# ==================================================================================================
# **************************************************************************************************
#
#  88888888ba,    88888888888  88888888ba   88           ,ad8888ba,  8b        d8
#  88      `"8b   88           88      "8b  88          d8"'    `"8b  Y8,    ,8P
#  88        `8b  88           88      ,8P  88         d8'        `8b  Y8,  ,8P
#  88         88  88aaaaa      88aaaaaa8P'  88         88          88   "8aa8"
#  88         88  88"""""      88""""""'    88         88          88    `88'
#  88         8P  88           88           88         Y8,        ,8P     88
#  88      .a8P   88           88           88          Y8a.    .a8P      88
#  88888888Y"'    88888888888  88           88888888888  `"Y8888Y"'       88
#
# ==================================================================================================
if ( $RUN_DEPLOY ) && ( $RUN_DEBUG ); then sh_alert "DEBUG MODE: DEPLOY scripting bypassed"
elif ( $RUN_DEPLOY ); then sh_heading "DEPLOY script started"
# --------------------------------------------------------------------------------------------------
# SCRIPTING GOES HERE:
# --------------------------------------------------------------------------------------------------

  require_bin "aws"
  require_func "aws_eb_update"
  aws_eb_update "$APP_NAME" "$APP_TAG" "$APP_NAME_ENV"

# --------------------------------------------------------------------------------------------------
sh_success "DEPLOY script completed successfully"; fi
# **************************************************************************************************
# ==================================================================================================
# ==================================================================================================
# --------------------------------------------------------------------------------------------------


# --------------------------------------------------------------------------------------------------
# ==================================================================================================
# ==================================================================================================
# **************************************************************************************************
#
#  888888888888  88        88  88888888888     88888888888  888b      88  88888888ba,
#       88       88        88  88              88           8888b     88  88      `"8b
#       88       88        88  88              88           88 `8b    88  88        `8b
#       88       88aaaaaaaa88  88aaaaa         88aaaaa      88  `8b   88  88         88
#       88       88""""""""88  88"""""         88"""""      88   `8b  88  88         88
#       88       88        88  88              88           88    `8b 88  88         8P
#       88       88        88  88              88           88     `8888  88      .a8P
#       88       88        88  88888888888     88888888888  88      `888  88888888Y"'
#
# ==================================================================================================

sh_code "$(output_vars_json "__DIR" "__FILE" "__BASE" "${ENV_VARS[@]}")"

sh_success "RUN script completed successfully"

sh_end "$start"
